{
  "api/ETA.EtaSdk.html": {
    "href": "api/ETA.EtaSdk.html",
    "title": "Class EtaSdk | EasterAd",
    "keywords": "Class EtaSdk Namespace ETA Assembly ETA.dll SDK의 메인 코어입니다. 모든 SDK의 정보는 이 클래스에 의해 제어됩니다. public class EtaSdk : MonoBehaviour Inheritance System.Object EtaSdk Remarks EasterAd SDK의 정상적인 작동을 위해서는 Unity Scene 내에 EtaSdk 스크립트를 컴포넌트로 가지는 오브젝트가 단일하게 존재해야 합니다. Fields targetCamera public Camera? targetCamera Field Value Camera Properties Instance EtaSdk의 인스턴스를 가져옵니다. 인스턴스가 없으면 새로 생성합니다. public static EtaSdk Instance { get; } Property Value EtaSdk Methods AddItemClient(string, ref ItemClient) public void AddItemClient(string key, ref ItemClient itemClient) Parameters key string itemClient ItemClient CreateEtaSdk() public static void CreateEtaSdk() DestroyCall() public static void DestroyCall() GetItemClient() ItemClient dictionary를 가져옵니다. public Dictionary<string, ItemClient> GetItemClient() Returns Dictionary<string, ItemClient> ItemClient dictionary입니다. GetItemClient(string) ItemClient를 가져옵니다. public ItemClient? GetItemClient(string adUnitId) Parameters adUnitId string 가져올 ItemClient의 광고 단위 ID입니다. Returns ItemClient 가져온 ItemClient입니다. GetItemClientList() ItemClient 목록을 가져옵니다. public List<string> GetItemClientList() Returns List<string> ItemClient 목록입니다. RemoveItemClient(string) public void RemoveItemClient(string key) Parameters key string SetCamera(Camera) public void SetCamera(Camera userCamera) Parameters userCamera Camera UpdateItemClient(string, ref ItemClient) public void UpdateItemClient(string key, ref ItemClient itemClient) Parameters key string itemClient ItemClient"
  },
  "api/ETA.Item.html": {
    "href": "api/ETA.Item.html",
    "title": "Class Item | EasterAd",
    "keywords": "Class Item Namespace ETA Assembly ETA.dll Item 클래스를 통해 각 광고 오브젝트들을 제어할 수 있습니다. public abstract class Item : MonoBehaviour Inheritance System.Object Item Derived Plane Constructors Item() protected Item() Fields _client protected ItemClient _client Field Value ItemClient adUnitId public string adUnitId Field Value string allowImpression public bool allowImpression Field Value bool loadOnStart public bool loadOnStart Field Value bool refreshTime public float refreshTime Field Value float Properties Client public ItemClient Client { get; } Property Value ItemClient Methods GetClient(GameObject, string) 상속된 클래스에서 구현해야 합니다. protected abstract ItemClient GetClient(GameObject clientObject, string adUnitId) Parameters clientObject GameObject adUnitId string Returns ItemClient Load() 서버에서 광고를 로드하고 표시합니다. public abstract void Load()"
  },
  "api/ETA.MaterialManager.html": {
    "href": "api/ETA.MaterialManager.html",
    "title": "Class MaterialManager | EasterAd",
    "keywords": "Class MaterialManager Namespace ETA Assembly ETA.dll plane prefab에 기본 머터리얼을 할당하기 위한 매니저 클래스 입니다. public class MaterialManager : MonoBehaviour Inheritance System.Object MaterialManager Constructors MaterialManager() public MaterialManager() Fields defaultMaterial public Material? defaultMaterial Field Value Material defaultShader public Shader? defaultShader Field Value Shader"
  },
  "api/ETA.Plane.html": {
    "href": "api/ETA.Plane.html",
    "title": "Class Plane | EasterAd",
    "keywords": "Class Plane Namespace ETA Assembly ETA.dll Plane 클래스는 Item 클래스를 상속받아 평면 광고 오브젝트를 제어합니다. public class Plane : Item Inheritance System.Object Item Plane Inherited Members Item._client Item.adUnitId Item.allowImpression Item.loadOnStart Item.refreshTime Item.Client Constructors Plane() public Plane() Methods GetClient(GameObject, string) Plane의 생성자입니다. protected override ItemClient GetClient(GameObject clientObject, string adUnitId) Parameters clientObject GameObject 광고 오브젝트를 나타내는 GameObject\"입니다. adUnitId string 광고 단위 ID입니다. Returns ItemClient 생성된 PlaneClient 객체입니다. Load() 서버에서 광고를 로드하고 표시합니다. public override void Load()"
  },
  "api/ETA.html": {
    "href": "api/ETA.html",
    "title": "Namespace ETA | EasterAd",
    "keywords": "Namespace ETA Classes EtaSdk SDK의 메인 코어입니다. 모든 SDK의 정보는 이 클래스에 의해 제어됩니다. Item Item 클래스를 통해 각 광고 오브젝트들을 제어할 수 있습니다. MaterialManager plane prefab에 기본 머터리얼을 할당하기 위한 매니저 클래스 입니다. Plane Plane 클래스는 Item 클래스를 상속받아 평면 광고 오브젝트를 제어합니다."
  },
  "docs/ad-guideline.html": {
    "href": "docs/ad-guideline.html",
    "title": "광고 삽입 가이드라인 | EasterAd",
    "keywords": "광고 삽입 가이드라인 이 문서에서는 EasterAd의 내재형 인게임 광고를 삽입할 때 주의해야 하는 부분들을 설명합니다. 유효 시청의 정의 EasterAd의 광고를 통해 수익이 발생하기 위해서는 게임 내에서 광고가 유효하게 시청되어야 합니다. 유효 시청의 조건은 다음과 같습니다. 광고는 전체 화면에서 일정 크기 이상으로 송출되어야 합니다. 광고 콘텐츠가 지나친 가려짐이 없이 화면에 노출되어야 합니다. 광고가 화면으로부터 지나치게 틀어진 각도로 표시되면 안됩니다. 광고 콘텐츠는 위 조건을 만족하며 일정 시간 이상 연속하여 화면에 노출되어야 합니다. 유효 시청이 발생한 이후 다음 유효 시청까지는 여유 기간이 있어야 합니다. 사용자가 오랫동안 아무런 입력을 하지 않을 경우 유휴 상태로 간주하여 유효 시청이 발생하지 않습니다. 동시에 여러 광고가 위의 조건들을 만족하는 경우 노출된 광고들 중 하나의 광고만 유효 시청으로 평가됩니다. 다만 해당 상태가 지속되어 추가적인 유효 시청 발생을 위한 여유 시간이 확보된 경우 추가적인 유효 시청으로 평가될 수 있습니다. Note 위의 조건들 중 광고 노출 크기와 가려짐에 관련된 조건은 게임 내 물체 혹은 UI에 의한 가려짐 등을 고려하여 준수되어야 합니다. Warning EasterAd SDK는 사용자의 입력 감지를 위해 Input Manager를 사용합니다. Input System을 사용하는 프로젝트의 경우 Project Settings > Player > Other Settings > Active Input Handling을 Both로 설정해야 합니다. 위의 조건들을 만족하는 광고는 유효 시청으로 평가됩니다. 유효 시청의 발생은 Unity Editor상의 Gizmo를 통해 쉽게 확인할 수 있습니다. Warning 성능상의 이유로 게임 내 물체에 의한 가려짐의 평가는 시각적으로 보여지는 물체가 아닌 Collider를 기준으로 평가됩니다. 이로 인해 광고 삽입 시 아래의 사항을 고려해야 합니다. 게임 내에 투명 벽 등 시각적으로 보여지는 물체가 없이 Collider만 존재하는 경우, 광고 노출 크기 조건을 만족시키기 위해 Collider의 크기를 적절히 조정해야 합니다. 게임 내에서 렌더링 되지만 Collider가 존재하지 않는 객체들의 경우 EasterAd의 유효 시청 규정을 만족시키기에 적절한 Collider를 추가해야 합니다. 이 Collider는 게임 이용자가 시청하는 물체의 형태와 크기를 고려하여 추가되어야 합니다. 광고 삽입 가이드라인 EasterAd의 SDK를 활용하여 수익을 확보하는 동시에 게임 이용자의 게임 플레이 경험을 향상시키기 위해서는 광고 삽입 시 다음 가이드라인을 준수해야 합니다. 게임 이용자가 시청하는 장면에는 하나의 광고만 노출되는 것이 이상적입니다. 한 화면에 여러 광고가 노출되는 경우, 게임 이용자가 광고를 인지하고 시청하는 것이 어려워질 수 있습니다. 이는 추가적인 유효 시청의 발생을 어렵게 할 뿐더러 게임 이용자의 게임 플레이 경험을 저하시킬 수 있습니다. 작은 광고를 여러 개 노출하는 것보다 하나의 큰 광고를 노출하는 것이 유효 시청의 발생을 촉진할 수 있습니다. 광고 콘텐츠의 크기가 작은 경우, 유효 시청의 발생이 어려울 수 있습니다. 광고의 배치 간격은 게임 이용자의 이동 속도를 고려하여 적절히 조정되어야 합니다. 게임 이용자의 이동 속도에 따라 광고가 지나치게 빠르게 지나가는 경우, 광고를 인지하고 시청하는 것이 어려워질 수 있습니다."
  },
  "docs/ad-inventory.html": {
    "href": "docs/ad-inventory.html",
    "title": "Unity 프로젝트에 광고 인벤토리 삽입하기 | EasterAd",
    "keywords": "Unity 프로젝트에 광고 인벤토리 삽입하기 EasterAd SDK를 설치한 후에는 게임에 광고 인벤토리를 삽입할 수 있습니다. 이 문서에서는 EasterAd SDK를 사용하여 Unity 프로젝트에 광고 인벤토리를 삽입하는 방법을 설명합니다. 광고 단위 등록하기 게임에 광고를 송출하기 위해서는 광고 단위 ID가 필요합니다. 광고 단위는 하나 이상의 송출될 광고들의 묶음으로, 광고 실적을 관리하기 위한 최소 단위입니다. 광고 단위는 EasterAd 대시보드에서 등록할 수 있습니다. EasterAd 대시보드의 게임 목록 페이지에서 광고 단위를 등록할 게임을 클릭합니다. 좌측 메뉴에서 광고 단위를 클릭합니다. 광고 단위 추가 버튼을 클릭합니다. 광고 단위의 이름을 입력하고 등록 버튼을 클릭합니다. 이름으로는 게임 내 위치 등 광고 단위를 쉽게 구분할 수 있도록 작성하는 것이 좋습니다. 광고 단위가 등록됩니다. 위의 과정을 통해 광고 단위를 등록할 수 있습니다. 광고 단위가 등록되면 광고 단위 페이지에서 광고 단위 ID를 확인할 수 있습니다. 게임에 광고 인벤토리 삽입하기 Note 아래의 내용을 따라하기 전에, EasterAd SDK를 Unity 프로젝트에 설치하고 기본 설정을 완료해야 합니다. 해당 단계를 완료하지 않은 경우, 시작하기 문서를 참고하여 설치를 완료하세요. Rendering Pipeline에 알맞은 광고 Asset 설치하기 EasterAd SDK를 설치한 후에는 Unity 프로젝트의 Rendering Pipeline에 알맞은 광고 Asset을 설치해야 합니다. Window > EasterAd 메뉴를 클릭합니다. EasterAd 설정 창이 열리면, 창 하단의 버튼들 중 프로젝트의 Rendering Pipeline에 알맞은 버튼을 클릭합니다. Import 버튼을 클릭하여 Asset을 설치합니다. /Assets/EasterAd 폴더에 Plane Item prefab과 Shader 폴더가 생성된 것을 확인합니다. 광고 인벤토리 prefab 배치하기 가장 기초적인 광고 인벤토리는 설치된 EasterAd SDK의 기본 광고 인벤토리 Prefab 통해 구현할 수 있습니다. /Assets/EasterAd 폴더에서 Plane Item Prefab을 Scene에 배치합니다. 배치한 Plane Item의 transform을 조정하여 게임에 어울리는 위치에 배치합니다. 배치한 Plane Item Prefab의 Inspector 창에서 Plane 스크립트에 Ad Unit ID를 입력합니다. Ad Unit ID는 이전 단계에서 등록한 광고 단위의 ID를 입력합니다. Tip Plane Item Prefab을 선택한 후, Inspector에서 Mesh Renderer의 Material을 변경하여 광고가 표시되지 않을 때의 기본 이미지를 설정할 수 있습니다. 광고가 로드되면 Material의 메인 텍스처가 광고 이미지로 대체됩니다. Note 광고 인벤토리에 광고가 로드될 때에는 광고 인벤토리의 종횡비와 유사한 광고가 로드되며, 광고의 크기에 맞게 광고 인벤토리의 크기가 축소됩니다. 광고 송출 종횡비 정책에 대한 자세한 내용은 송출 광고의 종횡비 정책 문서를 참고하세요. Important 하나의 Ad Unit ID는 하나의 광고 인벤토리에만 사용할 수 있습니다. 여러 광고 인벤토리를 사용하려면 각각의 광고 인벤토리에 대해 Ad Unit ID를 발급받아야 합니다. 고급 - 광고 제어 스크립트 작성하기 기본적으로 광고 인벤토리는 Start 메서드가 실행될 때 광고를 로드하고 표시합니다. 필요에 따라 광고 로드 시점을 직접 제어하려면, 광고 인벤토리에 스크립트를 추가하여 광고를 제어할 수 있습니다. 광고 인벤토리 Prefab의 Plane 스크립트를 선택하고 Load On Start 옵션을 해제합니다. Window > EasterAd 메뉴에서 광고 인벤토리의 Load On Start 옵션을 해제할 수 있습니다. 새로운 C# 스크립트를 생성합니다. 이름은 AdController 등 자유롭게 지정합니다. 생성한 스크립트에 아래의 코드를 추가합니다. 이 코드는 광고 인벤토리가 특정 거리 이내로 들어왔을 때 광고를 로드하는 예시입니다. using UnityEngine; public class AdController : MonoBehaviour { private onceLoaded = false; void Update() { float distance = (gameObject.transform.position - Camera.main.transform.position).magnitude; if (!onceLoaded && distance < 10.0) { ETA.Plane plane = GetComponent<ETA.Plane>(); plane.Load(); onceLoaded = true; } } } 스크립트를 광고 인벤토리 게임 오브젝트에 추가합니다. 게임을 실행하면 조건을 만족하여 Load()가 실행될 때 광고가 표시됩니다. Tip 광고의 시청 여부를 확인하려면 Window > EasterAd 메뉴에서 Enable Log 옵션을 활성화하고, 게임 뷰에서 Gizmos를 활성화하세요. 시청 조건을 만족하는 광고 인벤토리는 아래와 같이 녹색으로 표시됩니다. 유효한 광고 시청 조건에 대한 자세한 내용은 광고 삽입 가이드라인 문서를 참고하세요. 고급 - 광고판 Prefab 생성하기 EasterAd가 제공하는 광고 인벤토리 Prefab은 보다 게임에 어울리는 광고판을 배치하기 위해 다른 Prefab의 자식 오브젝트로 배치될 수 있습니다. 새로운 Prefab을 생성합니다. 생성한 Prefab에 게임에 어울리는 광고판을 추가하거나, 기존 애셋이 있다면 해당 애셋을 추가합니다. /Assets/EasterAd 폴더에서 Plane Item Prefab을 적절한 위치에 배치합니다. 광고판 Prefab 생성이 완료됩니다. 이렇게 생성한 광고판 Prefab은 EasterAd의 기본 광고 인벤토리 Prefab과 마찬가지로 게임에 삽입하여 광고를 표시할 수 있습니다. Warning 광고 인벤토리 Prefab이 부모 오브젝트가 아닌 경우 광고 인벤토리의 Scale은 부모 오브젝트의 Scale에 영향을 받습니다. 이 때 광고 인벤토리 Prefab은 변형되거나 찌그러지지 않고 모든 모서리가 직각인 평면 사각형이어야 합니다."
  },
  "docs/approval-request.html": {
    "href": "docs/approval-request.html",
    "title": "매체 심사 요청하기 | EasterAd",
    "keywords": "매체 심사 요청하기 실제 광고를 송출하기 위해서는 EasterAd에 매체 심사를 요청하고 심사를 통과해야 합니다. 매체 심사는 광고 송출을 위한 매체의 적합성을 평가하는 과정입니다. 매체 심사 과정에서 광고가 인게임 Scene에 적절하게 삽입되었는지, 광고 단위의 사용은 적절한지 등의 여러 가지 요소를 검토합니다. 이 문서에서는 매체 심사를 요청하는 방법과 심사를 위해 준비해야 할 것들을 안내합니다. 매체 심사 요청 방법 EasterAd 대시보드에서 매체 심사를 요청할 수 있습니다. 매체 심사 요청은 다음과 같은 단계로 진행됩니다. 심사를 요청할 게임의 설정 페이지로 이동합니다. 스토어 URL이 등록되어 있는지 확인합니다. 스토어 URL이 등록되어 있지 않은 경우, 게임을 구매 혹은 다운로드 할 수 있는 스토어의 URL을 등록합니다. 심사 요청 버튼을 클릭하여 매체 심사를 요청합니다. 심사가 요청되면 빠른 시일 내에 계정 이메일로 심사 진행을 위한 안내 메일이 발송됩니다. 메일의 안내에 따라 심사를 진행합니다. Note 아직 출시하지 않아 스토어 URL이 없는 경우 매체 심사를 요청할 수 없습니다. 실제 광고 송출을 위해서는 출시 후 매체 심사를 통과하여 발급된 SDK 키를 사용하여 게임을 빌드해야 합니다. 실제 광고가 송출되기 전까지는 샘플 광고가 송출됩니다. 매체 심사를 위해 준비해야 할 것들 심사 신청 시 전송되는 안내 메일에는 심사를 위해 준비해야 할 것들이 명시되어 있습니다. 심사를 위해 준비해야 할 것들은 다음과 같습니다. EasterAd의 광고가 삽입된 게임의 실행 가능한 디버그 빌드 파일 게임에 삽입된 모든 광고 인벤토리에 접근 가능한 방법과 방법에 대한 설명 심사 신청 시 EasterAd에 제공해야 하는 광고 인벤토리 접근 방법은 아래와 같은 조건을 만족해야 합니다. 광고 인벤토리에 쉽게 접근 가능해야 합니다. 예를 들어 특정 조작 키를 입력하거나 인게임 콘솔 명령어를 제공하는 등의 방법을 사용할 수 있습니다. 이 외에도 사용자가 쉽게 접근할 수 있는 방법이라면 다른 방법을 사용할 수 있습니다. 광고 인벤토리 접근 방법은 명확하고 쉽게 설명되어 게임을 플레이하지 않은 사용자도 쉽게 접근할 수 있어야 합니다. 광고 인벤토리 접근 후 광고는 가능한 인게임에서의 실제 광고와 동일한 방식으로 송출되어야 합니다. 예를 들어 인게임 컷신에서 광고를 송출하는 경우, 광고 인벤토리 접근 방법을 통해서도 인게임 컷신에서 광고가 송출되어야 합니다. 광고 인벤토리 접근 방법은 게임의 특정 부분으로 이동하는 것이 아니라, 광고 인벤토리에 바로 접근할 수 있어야 합니다. 예를 들어 게임의 특정 Scene의 시작 지점으로부터 멀리 떨어진 곳에 광고 인벤토리가 있는 경우, 광고 인벤토리 접근 방법을 통해 Scene의 시작 지점이 아닌 광고 인벤토리의 위치에 접근할 수 있어야 합니다. 별도의 인증 절차(예. 로그인)를 거친 후 시청 가능한 광고 인벤토리가 존재할 경우, 해당 광고 인벤토리를 시청할 수 있는 테스트 계정을 제공해야 합니다. 이러한 조건은 매체 심사를 성공적으로 통과하기 위해 필요할 뿐만 아니라, 유효한 광고 시청이 발생할 수 있도록 적절히 광고가 삽입되었는지 확인하기 위해서도 필요한 조건들입니다."
  },
  "docs/aspect-policy.html": {
    "href": "docs/aspect-policy.html",
    "title": "송출 광고의 종횡비 정책 | EasterAd",
    "keywords": "송출 광고의 종횡비 정책 EasterAd는 광고 송출 시 게임에 삽입된 광고 인벤토리의 종횡비를 고려하여 적절한 광고를 송출합니다. 본 문서에서는 광고 인벤토리를 게임에 삽입할 때 고려해야 하는 EasterAd의 종횡비 정책에 대해 설명합니다. 종횡비의 정의 종횡비는 광고 인벤토리 혹은 광고의 너비를 높이로 나눈 값입니다. \\(aspect = \\frac{width}{height}\\) 예를 들어 너비가 720이고 높이가 1080인 광고 인벤토리의 종횡비는 소수점 둘째 자리에서 반올림하여 0.67입니다. 더 큰 종횡비를 가질수록 광고 인벤토리 혹은 광고판이 가로로 더 길쭉해집니다. 종횡비 정책 EasterAd는 게임에 삽입된 광고 인벤토리의 종횡비로부터 일정 범위 내의 종횡비를 가진 광고만을 송출합니다. 송출되는 광고의 최소, 최대 종횡비는 다음과 같습니다. 최소 종횡비: 광고 인벤토리의 높이는 유지하되, 너비는 광고 인벤토리의 너비의 70% 최대 종횡비: 광고 인벤토리의 너비는 유지하되, 높이는 광고 인벤토리의 높이의 70% \\(min(aspect) = \\frac{width \\times 0.7}{height}\\), \\(max(aspect) = \\frac{width}{height \\times 0.7}\\) 예를 들어 너비가 720이고 높이가 1080인 종횡비 0.67의 광고 인벤토리의 경우, 최소 종횡비는 0.47, 최대 종횡비는 0.95입니다. EasterAd의 종횡비 정책은 송출하는 광고의 최소 종횡비인 0.25부터 최대 종횡비인 10.00까지 모든 종횡비 구간에서 적어도 한 종류 이상의 종횡비를 가진 광고를 송출하도록 설계되어 있습니다. 때문에 최대-최소 종횡비 범위 내에서는 광고 인벤토리의 종횡비를 자유롭게 설정해도 광고 송출이 가능합니다. Note EasterAd가 송출하는 광고의 최소 종횡비는 0.25, 최대 종횡비는 10.00입니다. 광고 인벤토리가 지나치게 가로 혹은 세로로 길쭉한 경우, EasterAd는 해당 광고 인벤토리에 광고를 송출하지 않을 수 있습니다. Note 송출되는 광고의 종횡비를 따라 게임에 삽입된 광고 인벤토리의 종횡비 역시 변경됩니다. 따라서 광고 인벤토리를 배치할 때 광고에 따라 광고 인벤토리에 의해 가려진 뒷부분이 노출될 수 있음을 유의해야 합니다. 다만 광고 인벤토리가 원래의 크기보다 커지는 경우는 없습니다. FAQ Q. 광고 인벤토리 크기와 정확히 일치하는 광고를 송출하려면 어떻게 해야하나요? A. EasterAd는 아직 고정 종횡비 기능을 지원하고 있지 않습니다. 후속 업데이트에 고정된 종횡비의 광고를 송출받을 수 있도록 지원할 예정입니다. Q. 광고 인벤토리가 광고에 맞추어 줄어드는 대신 레터박스를 추가하려면 어떻게 해야하나요? A. EasterAd SDK를 삽입한 광고 인벤토리의 바로 뒷편에 적절한 색상의 Plane 등의 오브젝트를 배치해주세요."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "시작하기 | EasterAd",
    "keywords": "시작하기 EasterAd 서비스를 사용하기 위해, 먼저 EasterAd SDK를 설치해야 합니다. 이 문서에서는 EasterAd SDK를 설치하고 초기화하는 방법을 설명합니다. Note EasterAd SDK는 현재 Unity만을 지원합니다. EasterAd 대시보드에서 Game ID 발급 EasterAd SDK를 사용하기 위해서는 먼저 EasterAd 대시보드에서 SDK를 설치할 게임의 Game ID를 발급받아야 합니다. EasterAd 서비스 가입 후, 대시보드의 게임 메뉴에서 게임 등록 버튼을 클릭하여 게임을 등록할 수 있습니다. 게임 등록 화면에서는 게임의 이름과 플랫폼, 게임을 판매 혹은 다운로드할 수 있는 스토어 URL을 입력합니다. Note 현재 EasterAd는 Windows, Android, iOS 플랫폼만을 지원합니다. Note 스토어 URL은 필수 입력은 아니지만, 추후 실재 광고 송출을 위한 매체 심사를 요청하기 위해서는 등록되어 있어야 합니다. 등록된 게임의 게임 ID는 게임 목록 페이지 혹은 게임 내 설정 페이지에서 확인할 수 있습니다. EasterAd SDK 설치 EasterAd의 광고를 삽입하기 위해 Unity 프로젝트에 EasterAd SDK를 설치해야 합니다. Unity Package를 이용한 설치 Unity Editor의 상단 바에서 Window를 클릭합니다. Package Manager를 선택합니다. + 버튼을 클릭하고 Add package from git URL...을 선택합니다. 입력란에 https://github.com/Autovertise/EasterAd_SDK_Release.git을 입력하고 Add 버튼을 클릭합니다. Window > EasterAd 메뉴가 추가된 것을 확인합니다. EasterAd SDK 설정 EasterAd SDK를 사용하기 위해, 위에서 발급받은 게임 ID를 EasterAd SDK에 입력해야 합니다. Window 메뉴를 클릭합니다. EasterAd 메뉴를 선택하여 EasterAd SDK 설정 창을 엽니다. Enable EasterAd SDK를 체크하여 EasterAd SDK를 활성화합니다. 그 후 Game ID 입력란에 위에서 발급받은 Game ID를 입력합니다. 필요에 따라 Enable Log를 체크하여 디버그 로그 및 기즈모 표시를 활성화할 수 있습니다.` Save 버튼을 클릭하여 설정을 저장합니다. Note Save 버튼을 클릭하면, 설정이 프로젝트의 스트리밍 에셋 폴더에 저장됩니다. Note SDK Key는 매체 심사 이후 발급됩니다. SDK Key는 실제 광고 송출 시에 필요하며, 개발 환경에서는 Game ID만으로도 SDK를 사용할 수 있습니다. 위의 단계를 완료하면 게임에 광고 인벤토리를 삽입하고 테스트 광고를 송출할 수 있습니다. 광고 인벤토리 삽입 방법은 광고 인벤토리 삽입하기 문서를 참고하세요."
  },
  "index.html": {
    "href": "index.html",
    "title": "EasterAd 소개 | EasterAd",
    "keywords": "EasterAd 소개 EasterAd 문서에 오신 것을 환영합니다! 이 페이지에서는 여러분이 사용하실 EasterAd 서비스와 내재형 인게임 광고의 개념을 소개합니다. EasterAd SDK의 사용법을 알고 싶다면 시작하기 문서를 참고해주세요. Note 다른 언어로 작성된 문서가 필요하시다면 아래의 링크를 참고해주세요. 한국어 English EasterAd는 게임 개발자의 인게임 내재형 광고 진행을 위한 서비스입니다. EasterAd를 통해 쉽고 빠르게 Unity 프로젝트에 내재형 광고를 삽입하여 게임을 수익화할 수 있습니다. 내재형 인게임 광고란? 내재형 임게임 광고는 게임 환경에 자연스럽게 통합되어 사용자에게 광고를 노출하는 방식입니다. 이러한 광고는 사용자의 게임 플레이를 방해하지 않으면서도 게임 개발자에게 수익을 제공합니다. 내재형 광고는 아래와 같은 특징을 가집니다. 게임 환경에 자연스럽게 통합: 사용자의 게임 플레이를 방해하지 않고 게임 환경에 자연스럽게 통합됩니다. 이를 통해 사용자의 게임 플레이 경험을 향상시킬 수 있습니다. 지속적인 수익 제공: 사용자의 게임 플레이에 따라 광고 수익이 지속적으로 발생합니다. 예를 들어 게임 구매 시점에만 수익이 발생하던 패키지 게임에 내재형 광고를 삽입하여 지속적인 수익을 얻을 수 있습니다. 기존 수익 모델과 병행 가능: 내재형 광고는 기존의 수익 모델과 병행하여 사용할 수 있습니다. 예를 들어 부분 유료화 수익 모델을 채택한 게임에 내재형 광고를 삽입하여 광고 수익과 유료 아이템 판매 수익을 동시에 얻을 수 있습니다. 심지어 기존의 광고 형식과 내재형 광고 형식을 병행하여 사용할 수도 있습니다. EasterAd EasterAd는 게임 개발자가 Unity 프로젝트에 내재형 광고를 삽입할 때 필요한 모든 기능을 제공합니다. EasterAd를 통해 게임 개발자는 다음과 같은 기능을 이용할 수 있습니다. Unity SDK EasterAd는 게임에 내재형 광고를 삽입하기 위한 Unity SDK를 제공합니다. Unity SDK를 통해 게임 개발자는 Unity 프로젝트에 내재형 광고를 쉽고 빠르게 삽입할 수 있습니다. EasterAd SDK는 아래와 같은 기능들을 제공합니다. 손쉬운 Drag & Drop 광고 삽입: Unity 에디터 상에서 내재형 광고를 쉽게 삽입할 수 있습니다. [!Video /../images/developer-dnd-example.mp4] 광고 송신 및 표시 제어: 광고 송신 및 표시 시점을 프로그래머가 쉽게 제어할 수 있습니다. 디버그 로그 & Gizmo: 광고 송수신 상황과 시청 평가 여부를 실시간으로 쉽게 확인할 수 있습니다. Dashboard EasterAd는 게임 개발자가 광고 삽입 상황을 실시간으로 확인할 수 있는 대시보드를 제공합니다. 대시보드를 통해 게임 개발자는 수익화할 게임과 광고 단위를 등록하고 관리할 수 있습니다. 대시보드는 아래와 같은 기능들을 제공합니다. 튜토리얼: EasterAd 서비스 사용 방법을 쉽게 학습할 수 있는 튜토리얼을 제공합니다. 게임 등록: 수익화할 게임을 등록할 수 있습니다. 광고 단위 등록: 게임에 삽입할 광고 단위를 등록할 수 있습니다."
  }
}