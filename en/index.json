{
  "api/ETA.EtaSdk.html": {
    "href": "api/ETA.EtaSdk.html",
    "title": "Class EtaSdk | EasterAd",
    "keywords": "Class EtaSdk Namespace ETA Assembly ETA.dll Main core of the SDK. All the SDK information will be controlled by this class. public class EtaSdk : MonoBehaviour Inheritance System.Object EtaSdk Remarks For the proper operation of the EasterAd SDK, there must be a single object in the Unity Scene that has the EtaSdk script as a component. Fields targetCamera public Camera? targetCamera Field Value Camera Properties Instance Gets the instance of EtaSdk. If no instance exists, a new one is created. public static EtaSdk Instance { get; } Property Value EtaSdk Methods AddItemClient(string, ref ItemClient) public void AddItemClient(string key, ref ItemClient itemClient) Parameters key string itemClient ItemClient CreateEtaSdk() public static void CreateEtaSdk() DestroyCall() public static void DestroyCall() GetItemClient() Gets the dictionary of ItemClients. public Dictionary<string, ItemClient> GetItemClient() Returns Dictionary<string, ItemClient> The dictionary of ItemClients. GetItemClient(string) Gets an ItemClient. public ItemClient? GetItemClient(string adUnitId) Parameters adUnitId string The ad unit ID of the ItemClient to get. Returns ItemClient The retrieved ItemClient. GetItemClientList() Gets the list of ItemClients. public List<string> GetItemClientList() Returns List<string> The list of ItemClients. RemoveItemClient(string) public void RemoveItemClient(string key) Parameters key string SetCamera(Camera) public void SetCamera(Camera userCamera) Parameters userCamera Camera UpdateItemClient(string, ref ItemClient) public void UpdateItemClient(string key, ref ItemClient itemClient) Parameters key string itemClient ItemClient"
  },
  "api/ETA.Item.html": {
    "href": "api/ETA.Item.html",
    "title": "Class Item | EasterAd",
    "keywords": "Class Item Namespace ETA Assembly ETA.dll You can control each ad object through the Item class. public abstract class Item : MonoBehaviour Inheritance System.Object Item Derived Plane Constructors Item() protected Item() Fields _client protected ItemClient _client Field Value ItemClient adUnitId public string adUnitId Field Value string allowImpression public bool allowImpression Field Value bool loadOnStart public bool loadOnStart Field Value bool refreshTime public float refreshTime Field Value float Properties Client public ItemClient Client { get; } Property Value ItemClient Methods GetClient(GameObject, string) Must be implemented in the inherited class. protected abstract ItemClient GetClient(GameObject clientObject, string adUnitId) Parameters clientObject GameObject adUnitId string Returns ItemClient Load() Load Ad from server and show if. public abstract void Load()"
  },
  "api/ETA.MaterialManager.html": {
    "href": "api/ETA.MaterialManager.html",
    "title": "Class MaterialManager | EasterAd",
    "keywords": "Class MaterialManager Namespace ETA Assembly ETA.dll Manager class allocating default material on plane prefab. public class MaterialManager : MonoBehaviour Inheritance System.Object MaterialManager Constructors MaterialManager() public MaterialManager() Fields defaultMaterial public Material? defaultMaterial Field Value Material defaultShader public Shader? defaultShader Field Value Shader"
  },
  "api/ETA.Plane.html": {
    "href": "api/ETA.Plane.html",
    "title": "Class Plane | EasterAd",
    "keywords": "Class Plane Namespace ETA Assembly ETA.dll The Plane class inherits from the Item class to control plane ad objects. public class Plane : Item Inheritance System.Object Item Plane Inherited Members Item._client Item.adUnitId Item.allowImpression Item.loadOnStart Item.refreshTime Item.Client Constructors Plane() public Plane() Methods GetClient(GameObject, string) Constructor for Plane. protected override ItemClient GetClient(GameObject clientObject, string adUnitId) Parameters clientObject GameObject The GameObject representing the ad object. adUnitId string The ad unit ID. Returns ItemClient The created PlaneClient object. Load() Load Ad from server and show if. public override void Load()"
  },
  "api/ETA.html": {
    "href": "api/ETA.html",
    "title": "Namespace ETA | EasterAd",
    "keywords": "Namespace ETA Classes EtaSdk Main core of the SDK. All the SDK information will be controlled by this class. Item You can control each ad object through the Item class. MaterialManager Manager class allocating default material on plane prefab. Plane The Plane class inherits from the Item class to control plane ad objects."
  },
  "docs/ad-guideline.html": {
    "href": "docs/ad-guideline.html",
    "title": "Ad Insertion Guidelines | EasterAd",
    "keywords": "Ad Insertion Guidelines This document explains the key points to consider when inserting EasterAd's in-game ads. Definition of Valid Impressions To generate revenue through EasterAd ads, the ads must be validly viewed within the game. The conditions for valid impressions are as follows: The ad must be displayed at a size of at least a certain percentage of the total screen width. The ad content must be visible on the screen without excessive obstruction. The ad must not be displayed at an excessively skewed angle from the screen. The ad content must be continuously visible on the screen for a certain period of time while meeting the above conditions. There must be a cool-off period between valid impressions. If the user has not made any input for a long time, it is considered idle, and no valid impression occurs. If multiple ads meet the above conditions simultaneously, only one of the displayed ads is evaluated as a valid impression. However, if this state continues and the cool-off period for additional valid impressions is secured, additional valid impressions can be evaluated. Note The conditions related to the size of the ad display and obstruction must be observed considering obstructions by in-game objects or UI. Warning EasterAd SDK uses the Input Manager to detect user input. For projects using the Input System, set Project Settings > Player > Other Settings > Active Input Handling to Both. Ads that meet the above conditions are evaluated as valid impressions. The occurrence of valid impressions can be easily confirmed through Gizmo in the Unity Editor. Warning For performance reasons, the evaluation of obstructions by in-game objects is based on Colliders, not visually displayed objects. Therefore, the following points should be considered when inserting ads: If there are transparent walls or other objects that are not visually displayed but only have Colliders, the size of the Colliders should be appropriately adjusted to meet the ad display size conditions. For objects that are rendered in the game but do not have Colliders, appropriate Colliders should be added to meet EasterAd's valid impression regulations. These Colliders should be added considering the shape and size of the objects viewed by the game user. Ad Insertion Guidelines To secure revenue using EasterAd's SDK while enhancing the game user's experience, the following guidelines should be observed when inserting ads: Ideally, only one ad should be displayed in the scene viewed by the game user. If multiple ads are displayed on one screen, it may be difficult for the game user to recognize and view the ads. This can make it difficult to generate additional valid impressions and may degrade the game user's experience. Displaying one large ad rather than multiple small ads can promote the occurrence of valid impressions. If the size of the ad content is small, it may be difficult to generate valid impressions. The spacing of ad placements should be appropriately adjusted considering the game user's movement speed. If the ads pass by too quickly due to the game user's movement speed, it may be difficult to recognize and view the ads."
  },
  "docs/ad-inventory.html": {
    "href": "docs/ad-inventory.html",
    "title": "Inserting an Ad Inventory into a Unity Project | EasterAd",
    "keywords": "Inserting an Ad Inventory into a Unity Project After installing the EasterAd SDK, you can insert an ad inventory into your game. This document explains how to insert an ad inventory into a Unity project using the EasterAd SDK. Registering an Ad Unit To deliver ads in your game, you need an ad unit ID. An ad unit is a collection of one or more ads and is the minimum unit for managing ad performance. You can register ad units on the EasterAd dashboard. Click on the game for which you want to register an ad unit on the game list page of the EasterAd dashboard. Click on Ad Units in the left menu. Click the Add Ad Unit button. Enter the name of the ad unit and click the Register button. It is recommended to name the ad unit in a way that makes it easy to distinguish, such as by its location in the game. The ad unit is registered. You can register an ad unit through the above process. Once the ad unit is registered, you can check the ad unit ID on the ad unit page. Inserting Ad Inventory into the Game Note Before following the steps below, you must install the EasterAd SDK in your Unity project and set base information. If you have not completed these steps, refer to the Getting Started document to complete the installation. Installing Ad Assets Suitable for the Rendering Pipeline After installing the EasterAd SDK, you need to install ad assets suitable for the Rendering Pipeline of your Unity project. Click on the Window > EasterAd menu. When the EasterAd settings window opens, click the button suitable for your project's Rendering Pipeline at the bottom of the window. Click the Import button to install the assets. Verify that the Plane Item prefab and Shader folder are created in the /Assets/EasterAd folder. Placing the Ad Inventory Prefab The most basic ad inventory can be implemented through the default ad inventory prefab installed with the EasterAd SDK. Place the Plane Item prefab from the /Assets/EasterAd folder into the Scene. Adjust the transform of the placed Plane Item to position it appropriately in the game. In the Inspector window of the placed Plane Item prefab, enter the Ad Unit ID in the Plane script. Enter the ad unit ID registered in the previous step. Tip After selecting the Plane Item prefab, you can change the Material of the Mesh Renderer in the Inspector to set the default image displayed when no ad is shown. Important One Ad Unit ID can only be used for one ad inventory. To use multiple ad inventories, you need to obtain an Ad Unit ID for each ad inventory. Advanced - Writing an Ad Control Script By default, the ad inventory loads and displays ads when the Start method is executed. If you need to control the timing of ad loading directly, you can add a script to the ad inventory to manage the ads. Select the Plane script of the ad inventory Prefab and disable the Load On Start option. You can also disable the Load On Start option from the Window > EasterAd menu. Create a new C# script. You can name it AdController or any name you prefer. Add the following code to the created script. This code demonstrates loading an ad when the ad inventory comes within a certain distance. using UnityEngine; public class AdController : MonoBehaviour { private onceLoaded = false; void Update() { float distance = (gameObject.transform.position - Camera.main.transform.position).magnitude; if (!onceLoaded && distance < 10.0) { ETA.Plane plane = GetComponent<ETA.Plane>(); plane.Load(); onceLoaded = true; } } } Add the script to the ad inventory game object. When you run the game, the ad will be displayed. Tip To check if the ad is being viewed, enable the Enable Log option from the Window > EasterAd menu and activate Gizmos in the game view. Ads that meet the viewing conditions will be displayed in green as shown below. For more details on valid ad viewing conditions, refer to the Ad Insertion Guidelines document. Advanced - Creating an Billboard Prefab The ad inventory prefab provided by EasterAd can be placed as a child object of another prefab to place a more suitable ad board in the game. Create a new prefab. Add an billboard suitable for the game to the created prefab, or add an existing asset if available. Place the Plane Item prefab from the /Assets/EasterAd folder in an appropriate location. The creation of the billboard prefab is complete. The created billboard prefab can be inserted into the game to display ads, just like the basic ad inventory prefab provided by EasterAd. Warning If the ad inventory prefab is not a child object, the scale of the ad inventory is affected by the scale of the parent object. In this case, the ad inventory prefab must be a flat rectangle with all corners at right angles, without any distortion or deformation."
  },
  "docs/approval-request.html": {
    "href": "docs/approval-request.html",
    "title": "Requesting Media Approval | EasterAd",
    "keywords": "Requesting Media Approval To broadcast actual advertisements, you need to request media approval from EasterAd and pass the review. Media approval is the process of evaluating the suitability of the media for broadcasting advertisements. During the media approval process, various factors are reviewed, such as whether the advertisement is appropriately inserted into the in-game scene and whether the use of the advertisement unit is appropriate. This document guides you on how to request media approval and what to prepare for the review. How to Request Media Approval You can request media approval from the EasterAd dashboard. The media approval request proceeds as follows: Go to the settings page of the game for which you want to request approval. Check if the store URL is registered. If the store URL is not registered, register the URL of the store where the game can be purchased or downloaded. Click the request approval button to request media approval. Once the approval is requested, an email will be sent to your account email with instructions for the review process as soon as possible. Follow the instructions in the email to proceed with the review. Note If the game has not been released yet and does not have a store URL, you cannot request media approval. To broadcast actual advertisements, you need to pass the media approval after release and use the issued SDK key to build the game. Until actual advertisements are broadcast, sample advertisements will be broadcast. What to Prepare for Media Approval The instruction email sent when applying for approval specifies what needs to be prepared for the review. The items to prepare for the review are as follows: Executable debug build file of the game with EasterAd advertisements inserted A method to access all advertisement inventories inserted in the game and an explanation of the method The method to access the advertisement inventory that needs to be provided to EasterAd when applying for approval must meet the following conditions: The advertisement inventory must be immediately accessible. For example, you can use methods such as entering specific control keys or providing in-game console commands. Other methods can also be used as long as they are easily accessible to the user. The method to access the advertisement inventory must be clear and easy to explain so that users who have not played the game can easily access it. After accessing the advertisement inventory, the advertisement should be broadcast in the same way as actual advertisements in the game. For example, if the advertisement is broadcast in an in-game cutscene, it should also be broadcast in the in-game cutscene through the advertisement inventory access method. The method to access the advertisement inventory should allow direct access to the advertisement inventory, not to a specific part of the game. For example, if the advertisement inventory is far from the starting point of a specific scene in the game, the method to access the advertisement inventory should allow access to the location of the advertisement inventory, not the starting point of the scene. If there are advertisement inventories that can be viewed after a separate authentication process (e.g., login), you must provide a test account that can view those advertisement inventories. These conditions are necessary not only to successfully pass the media approval but also to ensure that valid advertisement views can occur by confirming that the advertisements are appropriately inserted."
  },
  "docs/aspect-policy.html": {
    "href": "docs/aspect-policy.html",
    "title": "Aspect Ratio Policy for Ad Delivery | EasterAd",
    "keywords": "Aspect Ratio Policy for Ad Delivery EasterAd delivers appropriate ads considering the aspect ratio of the ad inventory inserted into the game. This document explains EasterAd's aspect ratio policy that should be considered when inserting ad inventory into the game. Definition of Aspect Ratio The aspect ratio is the value obtained by dividing the width of the ad inventory or ad by its height. \\(aspect = \\frac{width}{height}\\) For example, the aspect ratio of an ad inventory with a width of 720 and a height of 1080 is 0.67, rounded to the second decimal place. The larger the aspect ratio, the more elongated the ad inventory or billboard is horizontally. Aspect Ratio Policy EasterAd delivers ads with an aspect ratio within a certain range based on the aspect ratio of the ad inventory inserted into the game. The minimum and maximum aspect ratios of the delivered ads are as follows: Minimum aspect ratio: Maintain the height of the ad inventory, but the width is 70% of the ad inventory's width. Maximum aspect ratio: Maintain the width of the ad inventory, but the height is 70% of the ad inventory's height. \\(min(aspect) = \\frac{width \\times 0.7}{height}\\), \\(max(aspect) = \\frac{width}{height \\times 0.7}\\) For example, for an ad inventory with a width of 720 and a height of 1080, with an aspect ratio of 0.67, the minimum aspect ratio is 0.47, and the maximum aspect ratio is 0.95. EasterAd's aspect ratio policy is designed to deliver at least one type of ad with an aspect ratio in every aspect ratio range from the minimum aspect ratio of 0.25 to the maximum aspect ratio of 10.00. Therefore, within the maximum-minimum aspect ratio range, you can freely set the aspect ratio of the ad inventory, and ad delivery is possible. Note The minimum aspect ratio of ads delivered by EasterAd is 0.25, and the maximum aspect ratio is 10.00. If the ad inventory is excessively elongated horizontally or vertically, EasterAd may not deliver ads to that ad inventory. Note The aspect ratio of the ad inventory inserted into the game will also change according to the aspect ratio of the delivered ad. Therefore, when placing ad inventory, be aware that the part behind the ad inventory may be exposed depending on the ad. However, the ad inventory will not become larger than its original size. FAQ Q. How can I deliver ads that exactly match the size of the ad inventory? A. EasterAd does not yet support fixed aspect ratio functionality. We plan to support the delivery of ads with fixed aspect ratios in future updates. Q. How can I add letterboxes instead of reducing the size of the ad inventory to fit the ad? A. Place an object such as a Plane with an appropriate color right behind the ad inventory where the EasterAd SDK is inserted."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | EasterAd",
    "keywords": "Getting Started To use the EasterAd service, you first need to install the EasterAd SDK. This document explains how to install and initialize the EasterAd SDK. Note Currently, the EasterAd SDK only supports Unity. Issuing a Game ID from the EasterAd Dashboard To use the EasterAd SDK, you first need to obtain a game ID for the game where the SDK will be installed from the EasterAd dashboard. After signing up for the EasterAd service, you can register your game by clicking the Register Game button in the Games menu on the dashboard. On the game registration screen, enter the name of the game, the platform, and the store URL where the game can be sold or downloaded. Note Currently, EasterAd only supports the Windows, Android, and iOS platforms. Note The store URL is not mandatory, but it must be registered to request media approval for actual ad broadcasting later. The game ID of the registered game can be found on the game list page or the game settings page. Installing the EasterAd SDK To insert EasterAd ads, you need to install the EasterAd SDK in your Unity project. Installation Using Unity Package In the Unity Editor, click Window on the top bar. Select Package Manager. Click the + button and select Add package from git URL.... Enter https://github.com/Autovertise/EasterAd_SDK_Release.git in the input field and click the Add button. Verify that the Window > EasterAd menu has been added. Configuring the EasterAd SDK To use the EasterAd SDK, you need to enter the game ID issued above into the EasterAd SDK. Click the Window menu. Select the EasterAd menu to open the EasterAd SDK settings window. Check Enable EasterAd SDK to activate the EasterAd SDK. Then, enter the game ID issued above in the Game ID input field. Optionally, check Enable Log to activate debug logs and gizmo display. Click the Save button to save the settings. Note When you click the Save button, the settings are saved in the project's Streaming Assets folder. Note The SDK Key is issued after media approval. The SDK Key is required for actual ad broadcasting, but the SDK can be used in the development environment with just the Game ID. Once the above steps are completed, you can insert ad inventories and broadcast test ads in your game. For information on how to insert ad inventories, refer to the Inserting Ad Inventory document."
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction to EasterAd | EasterAd",
    "keywords": "Introduction to EasterAd Welcome to the EasterAd documentation! This page introduces the EasterAd service and the concept of in-game embedded ads that you will use. If you want to learn how to use the EasterAd SDK, please refer to the Getting Started document. Note If you need documentation in other languages, please refer to the links below. Korean English EasterAd is a service for game developers to implement in-game embedded ads. With EasterAd, you can easily and quickly insert embedded ads into your Unity project to monetize your game. What are In-Game Embedded Ads? In-game embedded ads are ads that are naturally integrated into the game environment and exposed to users. These ads provide revenue to game developers without interrupting the user's gameplay. In-game embedded ads have the following characteristics: Naturally integrated into the game environment: They do not interrupt the user's gameplay and are seamlessly integrated into the game environment, enhancing the user's gaming experience. Continuous revenue generation: Ad revenue is continuously generated based on the user's gameplay. For example, by inserting embedded ads into a package game that only generated revenue at the time of purchase, you can achieve continuous revenue. Can be used alongside existing revenue models: Embedded ads can be used in conjunction with existing revenue models. For example, by inserting embedded ads into a game that adopts a freemium revenue model, you can obtain both ad revenue and revenue from the sale of paid items. You can even use both traditional ad formats and embedded ad formats together. EasterAd EasterAd provides all the necessary features for game developers to insert embedded ads into their Unity projects. Through EasterAd, game developers can utilize the following features: Unity SDK EasterAd provides a Unity SDK for inserting embedded ads into games. With the Unity SDK, game developers can easily and quickly insert embedded ads into their Unity projects. The EasterAd SDK offers the following features: Easy Drag & Drop Ad Insertion: Easily insert embedded ads within the Unity Editor. [!Video /../images/developer-dnd-example.mp4] Ad Transmission and Display Control: Programmers can easily control the timing of ad transmission and display. Debug Logs & Gizmo: Easily check the status of ad transmission and reception and whether the ad is being viewed in real-time. Dashboard EasterAd provides a dashboard where game developers can check the status of ad insertion in real-time. Through the dashboard, game developers can register and manage the games and ad units they want to monetize. The dashboard offers the following features: Tutorials: Provides tutorials to easily learn how to use the EasterAd service. Game Registration: Allows you to register the games you want to monetize. Ad Unit Registration: Allows you to register the ad units to be inserted into the game."
  }
}